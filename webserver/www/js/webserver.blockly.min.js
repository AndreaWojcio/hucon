function newFile(){Blockly.mainWorkspace.clear()}function loadFile(data){data&&(Blockly.mainWorkspace.clear(),xmlDom=Blockly.Xml.textToDom(data),Blockly.Xml.domToWorkspace(Blockly.mainWorkspace,xmlDom)),apendConsoleLog("Blockly workspace loaded from local disk.")}function getPythonCode(){return Blockly.Python.workspaceToCode(blocklyWorkspace)}function getFileData(){var xmlDom=Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);return Blockly.Xml.domToPrettyText(xmlDom)}function onResize(e){var blocklyArea=document.getElementById("blocklyArea"),blocklyDiv=document.getElementById("blocklyDiv"),element=blocklyArea,x=0,y=0;do{x+=element.offsetLeft,y+=element.offsetTop,element=element.offsetParent}while(element);blocklyDiv.style.left=x+"px",blocklyDiv.style.top=y+"px",blocklyDiv.style.width=blocklyArea.offsetWidth+"px",blocklyDiv.style.height=blocklyArea.offsetHeight-20+"px"}function udpateCode(event){var code=Blockly.Python.workspaceToCode(blocklyWorkspace);document.getElementById("pythonCode").value=code}function openFileDialog(load,extension){var parameter={};parameter.load=load,parameter.extension=extension;var title="",buttonText="";load?(title="Load file",buttonText="Load"):(title="Save file",buttonText="Save"),document.getElementById("fileText").hidden=load,document.getElementById("fileOkButton").value=JSON.stringify(parameter),document.getElementById("fileDialogTitle").innerHTML=title,document.getElementById("fileOkButton").innerHTML=buttonText,fileDialog=document.getElementById("fileDialog"),fileDialog.style.display="block";var data={};data.command="get_file_list",ajax("POST","__COMMAND__",JSON.stringify(data),function(message){for(selection=document.getElementById("fileSelect"),i=selection.options.length-1;i>=0;i--)selection.remove(i);var data=JSON.parse(message);for(load||((opt=document.createElement("option")).text="",opt.value="",selection.options.add(opt)),i=0;i<data.files.length;i++){var filename=data.files[i];if(filename.endsWith(extension)){var opt=document.createElement("option");opt.text=filename.slice(0,-extension.length),opt.value=filename.slice(0,-extension.length),selection.options.add(opt)}}document.getElementById("fileText").value=selection.options[selection.selectedIndex].value})}function fileDialogOk(){var callback,parameter=JSON.parse(document.getElementById("fileOkButton").value),filename=document.getElementById("fileText").value,command="",data="";parameter.load?(command="load",message="Please select a file to load.",callback=function(message){loadFile(message),console.log(message)}):(command="save",message="Write a name for the file to save.",data=getFileData(),callback=function(message){apendConsoleLog(message),console.log(message)}),""!=filename?/^[A-Za-z0-9_]+$/.test(filename)?(closeFileDialog(),ajax("POST","__FILE_ACCESS__?command="+command+"&filename="+filename+parameter.extension,data,callback)):alert("You have to enter a valid filename.\nOnly characters from a-z, numbers and _ are allowed."):alert(message)}function closeFileDialog(){fileialog=document.getElementById("fileDialog"),fileDialog.style.display="none"}function apendConsoleLog(message){var time=(new Date).toLocaleTimeString().replace("/.*(d{2}:d{2}:d{2}).*/","$1");document.getElementById("consoleLog").value=time+"\n\n"+message,openConsoleLogDialog()}function openConsoleLogDialog(){consoleLogDialog=document.getElementById("consoleLogDialog"),consoleLogDialog.style.display="block"}function closeConsoleLogDialog(){consoleLogDialog=document.getElementById("consoleLogDialog"),consoleLogDialog.style.display="none"}function command(value){if("execute"==value){ajax("POST","__FILE_ACCESS__?command=execute",getPythonCode().replace(/print/g,"HSTerm.term_exec"),apendConsoleLog)}else if("save_password"==value){if(oldUsername=document.getElementById("current_username").value,oldPassword=document.getElementById("current_password").value,newUsername=document.getElementById("new_username").value,newPassword=document.getElementById("new_password").value,confirmPassword=document.getElementById("confirm_password").value,""==oldUsername||""==oldPassword||""==newUsername||""==newPassword||""==confirmPassword)return void apendConsoleLog("You must fill every element.");if(newPassword!=confirmPassword)return void apendConsoleLog("The new and confirmed password are not the same.");oldKey=btoa(oldUsername+":"+oldPassword),newKey=btoa(newUsername+":"+newPassword);var data={};data.command=value,data.oldKey=oldKey,data.newKey=newKey,ajax("POST","__COMMAND__",JSON.stringify(data),apendConsoleLog)}}function ajax(type,url,data,callback){var xhttp=new XMLHttpRequest;xhttp.onreadystatechange=function(){4==this.readyState&&(200==this.status?callback(this.responseText):500==this.status?apendConsoleLog(this.responseText):alert("Could not get any access on the server."))},xhttp.open(type,url,!1),xhttp.send(data)}!function(funcName,baseObj){"use strict";function ready(){if(!readyFired){readyFired=!0;for(var i=0;i<readyList.length;i++)readyList[i].fn.call(window,readyList[i].ctx);readyList=[]}}function readyStateChange(){"complete"===document.readyState&&ready()}funcName=funcName||"docReady";var readyList=[],readyFired=!1,readyEventHandlersInstalled=!1;(baseObj=baseObj||window)[funcName]=function(callback,context){if("function"!=typeof callback)throw new TypeError("callback for docReady(fn) must be a function");readyFired?setTimeout(function(){callback(context)},1):(readyList.push({fn:callback,ctx:context}),"complete"===document.readyState||!document.attachEvent&&"interactive"===document.readyState?setTimeout(ready,1):readyEventHandlersInstalled||(document.addEventListener?(document.addEventListener("DOMContentLoaded",ready,!1),window.addEventListener("load",ready,!1)):(document.attachEvent("onreadystatechange",readyStateChange),window.attachEvent("onload",ready)),readyEventHandlersInstalled=!0))}}("docReady",window);var MACHINE_PINS=[["NeoPixel","14"],["Servo 1","12"],["Servo 2","13"],["GPIO 2","2"],["GPIO 4","4"],["GPIO 5","5"]],MACHINE_PIN_VALUES=[["Off","0"],["On","1"]],MACHINE_PIN_DIRECTIONS=[["In","Pin.IN"],["Out","Pin.OUT"]];Blockly.Blocks.machine_pin={init:function(){this.setColour(208),this.appendDummyInput().appendField("pin").appendField(new Blockly.FieldDropdown(MACHINE_PINS),"Pin"),this.setOutput(!0,"MachinePin");var thisBlock=this;this.setTooltip(function(){return"Get a pin object on "+thisBlock.getFieldValue("Pin")})}},Blockly.Python.machine_pin=function(block){return Blockly.Python.definitions_.import_machine_pin="from machine import Pin",["Pin("+block.getFieldValue("Pin")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.machine_pin_parameter={init:function(){this.setColour(208),this.appendDummyInput().appendField("pin").appendField(new Blockly.FieldDropdown(MACHINE_PINS),"Pin"),this.appendDummyInput().appendField("direction").appendField(new Blockly.FieldDropdown(MACHINE_PIN_DIRECTIONS),"Direction"),this.setOutput(!0,"MachinePin");var thisBlock=this;this.setTooltip(function(){return"Get a pin object on "+thisBlock.getFieldValue("Pin")+" with the directio "+thisBlock.getFieldValue("Direction")})}},Blockly.Python.machine_pin_parameter=function(block){return Blockly.Python.definitions_.import_machine_pin="from machine import Pin",["Pin("+block.getFieldValue("Pin")+", "+block.getFieldValue("Direction")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.machine_pin_get={init:function(){this.setColour(208),this.appendDummyInput().appendField("get value from").appendField(new Blockly.FieldVariable("pin"),"Variable"),this.setOutput(!0,"MachinePinValue");var thisBlock=this;this.setTooltip(function(){return"Get the value from the machine pin "+thisBlock.getFieldValue("Variable")})}},Blockly.Python.machine_pin_get=function(block){return[Blockly.Python.variableDB_.getName(block.getFieldValue("Variable"),Blockly.Variables.NAME_TYPE)+".value()",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.machine_pin_value={init:function(){this.setColour(208),this.appendDummyInput().appendField("Pin").appendField(new Blockly.FieldDropdown(MACHINE_PIN_VALUES),"Value"),this.setOutput(!0,"MachinePinValue");this.setTooltip(function(){return"Definition which value are possible."})}},Blockly.Python.machine_pin_value=function(block){return[block.getFieldValue("Value"),Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.machine_pin_set={init:function(){this.setColour(208),this.appendDummyInput().appendField("Set").appendField(new Blockly.FieldVariable("pin"),"Variable"),this.appendDummyInput().appendField("to").appendField(new Blockly.FieldDropdown(MACHINE_PIN_VALUES),"MACHINE_PIN_VALUE"),this.setInputsInline(!0),this.setPreviousStatement(!0),this.setNextStatement(!0);var thisBlock=this;this.setTooltip(function(){return"Set the value on pin "+thisBlock.getFieldValue("Variable")})}},Blockly.Python.machine_pin_set=function(block){return Blockly.Python.variableDB_.getName(block.getFieldValue("Variable"),Blockly.Variables.NAME_TYPE)+".value("+block.getFieldValue("MACHINE_PIN_VALUE")+")\n"},Blockly.Blocks.machine_sleep={init:function(){this.setColour(208),this.appendDummyInput().appendField("Sleep for").appendField(new Blockly.FieldNumber("100"),"Milliseconds").appendField("milliseconds"),this.setPreviousStatement(!0),this.setNextStatement(!0);var thisBlock=this;this.setTooltip(function(){return"Sleep for "+thisBlock.getFieldValue("Milliseconds")+"milliseconds."})}},Blockly.Python.machine_sleep=function(block){Blockly.Python.definitions_.import_time="import time";var code="";return code+="time.sleep("+block.getFieldValue("Milliseconds")/1e3+")\n"},Blockly.Blocks.neopixel_array={init:function(){this.setColour(208),this.appendValueInput("VAR").setCheck("MachinePin").appendField("create NeoPixel list on"),this.setOutput(!0,"NeoPixelArray"),this.setTooltip(function(){return"Create a NeoPixel List which is conntected to the given pin."})}},Blockly.Python.neopixel_array=function(block){return Blockly.Python.definitions_.import_neopixel="from neopixel import NeoPixel",["NeoPixel("+(Blockly.Python.valueToCode(block,"VAR",Blockly.Python.ORDER_ATOMIC)||"NULL")+", 2)",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.neopixel_colour={init:function(){this.setColour(208),this.appendDummyInput().appendField("NeoPixel color:").appendField(new Blockly.FieldColour("#ff0000"),"COLOUR"),this.setOutput(!0,"NeoPixelColor");var thisBlock=this;this.setTooltip(function(){return"Define for an element this color "+thisBlock.getFieldValue("COLOUR")})}},Blockly.Python.neopixel_colour=function(block){var colour=block.getFieldValue("COLOUR"),result=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(colour),r=parseInt(result[1],16);return["("+parseInt(result[2],16)+", "+r+", "+parseInt(result[3],16)+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.neopixel_colour_rgb={init:function(){this.setColour(208),this.appendDummyInput().appendField("NeoPixel color"),this.appendValueInput("R").setCheck("Number").appendField("Red"),this.appendValueInput("G").setCheck("Number").appendField("Green"),this.appendValueInput("B").setCheck("Number").appendField("Blue"),this.setInputsInline(!0),this.setOutput(!0,"NeoPixelColor");var thisBlock=this;this.setTooltip(function(){return"Define for an element this color ("+thisBlock.getFieldValue("R")+", "+thisBlock.getFieldValue("G")+", "+thisBlock.getFieldValue("B")+")"})}},Blockly.Python.neopixel_colour_rgb=function(block){var r=Blockly.Python.valueToCode(block,"R",Blockly.Python.ORDER_ATOMIC)||"0";return["("+(Blockly.Python.valueToCode(block,"G",Blockly.Python.ORDER_ATOMIC)||"0")+", "+r+", "+(Blockly.Python.valueToCode(block,"B",Blockly.Python.ORDER_ATOMIC)||"0")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.neopixel_write={init:function(){this.setColour(208),this.appendDummyInput().appendField("write").appendField(new Blockly.FieldVariable("np"),"VAR").appendField("data"),this.setPreviousStatement(!0),this.setNextStatement(!0);var thisBlock=this;this.setTooltip(function(){return"Write the NeoPixel data from "+thisBlock.getFieldValue("VAR")})}},Blockly.Python.neopixel_write=function(block){return Blockly.Python.variableDB_.getName(block.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+".write()\n"},Blockly.Blocks.servo_object={init:function(){this.setColour(208),this.appendValueInput("VAR").setCheck("MachinePin").appendField("create Servo on"),this.setOutput(!0,"Servo"),this.setTooltip(function(){return"Create a servo object which is conntected to the given pin."})}},Blockly.Python.servo_object=function(block){return Blockly.Python.definitions_.import_servo="from hs_servo import HSServo",["HSServo("+(Blockly.Python.valueToCode(block,"VAR",Blockly.Python.ORDER_ATOMIC)||"NULL")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.servo_object_param={init:function(){this.setColour(208),this.appendValueInput("Pin").setCheck("MachinePin").appendField("create Servo on"),this.appendValueInput("Freq").setCheck("Number").appendField("with frequency"),this.appendValueInput("MinUs").setCheck("Number").appendField("min"),this.appendValueInput("MaxUs").setCheck("Number").appendField("and max"),this.setOutput(!0,"Servo"),this.setTooltip(function(){return"Create a servo object which is conntected to the given pin."})}},Blockly.Python.servo_object_param=function(block){return Blockly.Python.definitions_.import_servo="from hs_servo import HSServo",["HSServo("+(Blockly.Python.valueToCode(block,"Pin",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"Freq",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"MinUs",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"MaxUs",Blockly.Python.ORDER_ATOMIC)||"NULL")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.servo_set_angle={init:function(){this.setColour(208),this.appendDummyInput().appendField("Set").appendField(new Blockly.FieldVariable("servo"),"VAR"),this.appendValueInput("Angle").setCheck("Number").appendField("angle"),this.setInputsInline(!0),this.setPreviousStatement(!0),this.setNextStatement(!0);var thisBlock=this;this.setTooltip(function(){return"Set the servo angle on pin "+thisBlock.getFieldValue("VAR")})}},Blockly.Python.servo_set_angle=function(block){return Blockly.Python.variableDB_.getName(block.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+".set_angle("+(Blockly.Python.valueToCode(block,"Angle",Blockly.Python.ORDER_ATOMIC)||"0")+")\n"},Blockly.Blocks.motor_object={init:function(){this.setColour(208),this.appendValueInput("Pin").setCheck("MachinePin").appendField("create Motor on"),this.appendValueInput("Offset").setCheck("Number").appendField("with offset"),this.setInputsInline(!0),this.setOutput(!0,"Motor"),this.setTooltip(function(){return"Create a motor object which is conntected to the given pin."})}},Blockly.Python.motor_object=function(block){return Blockly.Python.definitions_.import_motor="from hs_motor import HSMotor",["HSMotor("+(Blockly.Python.valueToCode(block,"Pin",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"Offset",Blockly.Python.ORDER_ATOMIC)||"NULL")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.motor_object_param={init:function(){this.setColour(208),this.appendValueInput("Pin").setCheck("MachinePin").appendField("create Motor on"),this.appendValueInput("Offset").setCheck("Number").appendField("offset"),this.appendValueInput("Freq").setCheck("Number").appendField("frequency"),this.appendValueInput("MinUs").setCheck("Number").appendField("min us"),this.appendValueInput("MaxUs").setCheck("Number").appendField("min us"),this.setOutput(!0,"Motor"),this.setTooltip(function(){return"Create a motor object which is conntected to the given pin."})}},Blockly.Python.motor_object_param=function(block){return Blockly.Python.definitions_.import_motor="from hs_motor import HSMotor",["HSMotor("+(Blockly.Python.valueToCode(block,"Pin",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"Offset",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"Freq",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"MinUs",Blockly.Python.ORDER_ATOMIC)||"NULL")+", "+(Blockly.Python.valueToCode(block,"MaxUs",Blockly.Python.ORDER_ATOMIC)||"NULL")+")",Blockly.Python.ORDER_ATOMIC]},Blockly.Blocks.motor_set_speed={init:function(){this.setColour(208),this.appendDummyInput().appendField("Set").appendField(new Blockly.FieldVariable("motor"),"VAR"),this.appendValueInput("Time").setCheck("Number").appendField("speed to"),this.setInputsInline(!0),this.setPreviousStatement(!0),this.setNextStatement(!0);var thisBlock=this;this.setTooltip(function(){return"Set the motor speed on pin "+thisBlock.getFieldValue("VAR")})}},Blockly.Python.motor_set_speed=function(block){return Blockly.Python.variableDB_.getName(block.getFieldValue("VAR"),Blockly.Variables.NAME_TYPE)+".set_speed("+(Blockly.Python.valueToCode(block,"Time",Blockly.Python.ORDER_ATOMIC)||"0")+")\n"};var blocklyWorkspace;docReady(function(){ajax("GET","xml/toolbox.xml","",function(message){document.getElementById("blocklyArea");var blocklyDiv=document.getElementById("blocklyDiv");blocklyWorkspace=Blockly.inject(blocklyDiv,{toolbox:message}),window.addEventListener("resize",onResize,!1),onResize(),Blockly.svgResize(blocklyWorkspace),blocklyWorkspace.addChangeListener(udpateCode)})}),window.onclick=function(event){fileDialog=document.getElementById("fileDialog"),event.target==fileDialog&&closeFileDialog(),consoleLogDialog=document.getElementById("consoleLogDialog"),event.target==consoleLogDialog&&closeConsoleLogDialog()};